{"version":3,"sources":["ToDoCard/ToDoItem.js","ToDoCard/ToDoInput.js","ToDoCard/ToDoList.js","ToDoCard/ToDoCard.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","react_default","a","createElement","className","onClick","toggleComplete","type","value","deleteItem","ToDoInput","onKeyPress","keyPressed","placeholder","onChange","inputChanged","addItem","ToDoList","state","currentToDo","toDoItems","id","completed","event","target","this","setState","key","handleItemAdd","trim","newItem","concat","Object","toConsumableArray","index","splice","currentCompletionStatus","_this2","map","currentItem","handleItemDeletion","bind","unfinishedTasks","getUnfinishedTasks","forEach","item","push","todoWrapperClasses","length","indexOfClassToRemove","indexOf","getToDoItems","handleInputChange","handleKeyPress","join","clearCompletedTasks","clearAllItems","Component","ToDoCard","title","ToDoList_ToDoList","App","ToDoCard_ToDoCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.141edb39.chunk.js","sourcesContent":["import React from 'react'\nimport '../index.css'\nimport './ToDoCard.css'\n\nexport default function ToDoItem(props) {\n    return (\n        <li className = \"todo__item\">\n            <div className=\"todo__item-group\">\n                <input onClick = {props.toggleComplete} type=\"checkbox\" className=\"todo__checkbox input\" />\n                <span className=\"todo__description\">{props.value}</span>\n            </div>\n            <i onClick = {props.deleteItem} className=\"fas fa-times todo__delete button\"></i>\n        </li>\n    )\n}","import React from 'react'\nimport '../index.css'\nimport './ToDoCard.css'\n\nexport default function ToDoInput(props) {\n    return (\n        <div onKeyPress = {props.keyPressed} className=\"todo__input-wrapper\">\n            <input type=\"text\" className=\"todo__input input\" placeholder=\"New task\" onChange={props.inputChanged} value = {props.value}></input>\n            <span onClick = {props.addItem} className=\"todo__add button\">Add</span>\n        </div>\n    );\n}","import React, { Component } from 'react'\nimport ToDoItem from './ToDoItem'\nimport ToDoInput from './ToDoInput'\nimport '../index.css'\nimport './ToDoCard.css'\n\nexport default class ToDoList extends Component {\n    state = {\n        currentToDo: \"\",\n        toDoItems: [\n            { id: 1, value: \"Fun\", completed: false },\n            { id: 2, value: \"d\", completed: false },\n            { id: 3, value: \"d\", completed: false }\n        ]\n    }\n    id = 5;\n\n    handleInputChange(event) {\n        const currentToDo = event.target.value;\n        this.setState({ currentToDo: currentToDo })\n    }\n\n    handleKeyPress(event) {\n        if (event.key === 'Enter') this.handleItemAdd();\n    }\n\n    handleItemAdd() {\n        if (this.state.currentToDo.trim() === '') return;\n        this.id++;\n        const newItem = { id: this.id, value: this.state.currentToDo }\n        const toDoItems = [...this.state.toDoItems, newItem];\n        this.setState({ currentToDo: \"\", toDoItems: toDoItems });\n    }\n\n    handleItemDeletion(index) {\n        const toDoItems = [...this.state.toDoItems];\n        toDoItems.splice(index, 1);\n        this.setState({ toDoItems: toDoItems });\n    }\n\n    toggleComplete(index) {\n        let toDoItems = [...this.state.toDoItems];\n        const currentCompletionStatus = this.state.toDoItems[index].completed;\n        toDoItems[index].completed = !currentCompletionStatus;\n        this.setState({ toDoItems: toDoItems })\n    }\n\n    clearAllItems() {\n        const toDoItems = [];\n        this.setState({ toDoItems: toDoItems });\n    }\n\n    getToDoItems() {\n        const toDoItems = this.state.toDoItems.map((currentItem, index) => {\n            return (\n                <ToDoItem key={currentItem.id} value={currentItem.value}\n                    deleteItem={this.handleItemDeletion.bind(this, index)}\n                    toggleComplete={this.toggleComplete.bind(this, index)} />\n            )\n        });\n        return toDoItems;\n    }\n\n    clearCompletedTasks() {\n        let unfinishedTasks = this.getUnfinishedTasks();\n        this.setState({ toDoItems: unfinishedTasks });\n    }\n\n    getUnfinishedTasks() {\n        let toDoItems = [...this.state.toDoItems];\n        let unfinishedTasks = [];\n        toDoItems.forEach(item => {\n            if (!item.completed) unfinishedTasks.push(item);\n        })\n        return unfinishedTasks;\n    }\n\n    render() {\n        let todoWrapperClasses = [\"todo__wrapper\", \"display-none\"];\n        let toDoItems = null;\n\n        if (this.state.toDoItems.length > 0) {\n            const indexOfClassToRemove = todoWrapperClasses.indexOf(\"display-none\");\n            todoWrapperClasses.splice(indexOfClassToRemove, 1);\n            toDoItems = this.getToDoItems();\n        }\n\n        return (\n            <div>\n                <ToDoInput value={this.state.currentToDo} inputChanged={this.handleInputChange.bind(this)} keyPressed={this.handleKeyPress.bind(this)} addItem={this.handleItemAdd.bind(this)} />\n\n                <div className={todoWrapperClasses.join(' ')}>\n                    <ul className=\"todo__list list\">\n                        {toDoItems}\n                    </ul>\n\n                    <div className=\"todo__clear-group\">\n                        <span onClick={this.clearCompletedTasks.bind(this)} className=\"button\">Clear Completed</span>\n                        <span onClick={this.clearAllItems.bind(this)} className=\"button\">Clear All</span>\n                    </div>\n                    \n                </div>\n            </div>\n        );\n    }\n}","import React from 'react'\nimport ToDoList from './ToDoList'\nimport '../index.css'\nimport './ToDoCard.css'\n\nexport default function ToDoCard(props) {\n    return (\n        <div className=\"todo\">\n            <div className=\"container\">\n                <h1 className=\"todo__title\">{props.title}</h1>\n                <ToDoList />\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport ToDoCard from './ToDoCard/ToDoCard'\n\nfunction App() {\n  return (\n      <ToDoCard title = \"To-Do List\"/>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}